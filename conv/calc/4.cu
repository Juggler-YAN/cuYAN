/*
 * 方法四：Winograd Algorithm
 */

import numpy as np

# 1D
AT = np.array([
    [1,0,-1,0],
    [0,1,1,0],
    [0,-1,1,0],
    [0,1,0,-1]
])
B = np.array([
    [1,0,0],
    [0.5,0.5,0.5],
    [0.5,-0.5,0.5],
    [0,0,1]
])
CT = np.array([
    [1,1,1,0],
    [0,1,-1,-1]
])
x = np.array([
    [0],
    [1],
    [2],
    [3]
])
w = np.array([
    [0],
    [1],
    [2]
])
y = CT @ ((B @ w) * (AT @ x))
print(y)



# 2D
X = np.array([
    [0,1,2,3],
    [1,2,3,4],
    [2,3,4,5],
    [3,4,5,6]
])
W = np.array([
    [0,1,2],
    [1,2,3],
    [2,3,4]
])
X1 = np.array([
    [0,1,2],
    [1,2,3]
])
X2 = np.array([
    [1,2,3],
    [2,3,4]
])
X3 = np.array([
    [2,3,4],
    [3,4,5]
])
X4 = np.array([
    [3,4,5],
    [4,5,6]
])
W1 = np.array([
    [0],
    [1],
    [2]
])
W2 = np.array([
    [1],
    [2],
    [3]
])
W3 = np.array([
    [2],
    [3],
    [4]
])
Y1 = (X1 - X3) @ W1
Y2 = (X2 + X3) @ ((W1 + W2 + W3) / 2)
Y3 = (X3 - X2) @ ((W1 - W2 + W3) / 2)
Y4 = (X2 - X4) @ W3
print(Y1+Y2+Y3)
print(Y2-Y3-Y4)